{
  "Nav": {
    "title": "Next.js + PrimeReact + i18n",
    "home": "Home"
  },
  "Home": {
    "title": "Home",
    "intro": "This is a simple landing page. Use the left menu to explore."
  },
  "Sidebar": {
    "home": "Home",
    "authorizationCode": "Authorization Code",
    "authorizationCodePublicClient": "Authorization Code - Public Client",
    "authorizationCodeConfidentialClient": "Authorization Code - Confidential Client",
    "settings": "Settings",
    "language": "Language",
    "switchTo": "Switch to {lang}"
  },
  "Settings": {
    "title": "Settings",
    "placeholder": "Placeholder page for Settings – implementation coming soon.",
    "entraTenantIdLabel": "Entra Tenant Id",
    "entraTenantIdHint": "Your Entra tenant id. This will be available throughout the app.",
    "save": "Save"
  },
  "AuthorizationCode": {
    "publicClientTitle": "Authorization Code (Public Client)",
    "publicClientPlaceholder": "Placeholder page for Authorization Code - Public Client – implementation coming soon.",
    "confidentialClientTitle": "Authorization Code (Confidential Client)",
    "confidentialClientPlaceholder": "Placeholder page for Authorization Code - Confidential Client – implementation coming soon.",
    "PublicClient": {
      "title": "Authorization Code (Public Client)",
      "steps": {
        "overview": "Overview",
        "settings": "Settings",
        "pkce": "PKCE",
        "authorize": "Authorize",
        "callback": "Callback",
        "tokens": "Tokens",
        "decode": "Decode",
        "validate": "Validate",
        "callApi": "Call API"
      },
      "sections": {
        "settings": {
          "title": "Settings",
          "description": "Configure your environment for the OAuth flow. Provide your Entra tenant (GUID) and public client ID (GUID). The redirect URI is auto-detected from the current origin (read-only) and must be registered in your app. Scopes determine what you’ll be asked to consent to.",
          "userProvidedTitle": "User-provided settings",
          "userProvidedDescription": "These fields are configurable by you and are used to build the authorization request.",
          "localStorageNotice": "These values will be saved in your browser's local storage for convenience.",
          "resolvedTitle": "Resolved (read-only) values",
          "resolvedDescription": "These values are derived from the tenant and other inputs. They are shown for reference and cannot be changed here.",
          "flowPanelTitle": "How the Authorization Code + PKCE flow works",
          "flowIntro": "This app demonstrates the OAuth 2.0 Authorization Code flow with PKCE for public clients. In short: you build an authorization URL, sign in (popup), get a code at the redirect, then exchange it for tokens using the code_verifier.",
          "flowDiagram": "Client (Browser)\n   |\n   | 1) Generate code_verifier + code_challenge (S256)\n   v\nAuthorize Endpoint ------------------------------>\n   |   GET .../authorize?client_id=...&redirect_uri=...\n   |        &response_type=code&scope=...&state=...\n   |        &code_challenge=...&code_challenge_method=S256\n   |\n   | 2) User signs in and consents\n   v\nRedirect (Callback) <------------------------------\n   |   http(s)://your-app/callback/auth-code?code=...&state=...\n   |\n   | 3) Exchange code for tokens with code_verifier\n   v\nToken Endpoint ----------------------------------->\n   |   POST grant_type=authorization_code\n   |        &client_id=...\n   |        &code=...\n   |        &redirect_uri=...\n   |        &code_verifier=...\n   |\n   | 4) Receive tokens (access_token, id_token, ... )\n   v\nProtected API (e.g., Graph) --------------------->\n   |   Authorization: Bearer <access_token>\n   v\n  Response"
        },
        "pkce": {
          "title": "Generate PKCE (code_verifier & code_challenge)",
          "description": "PKCE secures public clients. Click the Generate button (left of the Code Verifier input) to create a high-entropy code_verifier and its code_challenge (S256 by default)."
        },
        "authorize": {
          "title": "Build authorization request URL",
          "description": "We build the authorization URL including your client_id, redirect_uri, scopes, optional state and nonce, and PKCE parameters. You can also set response_mode, prompt, and login_hint to influence how the identity provider returns results or how the sign-in experience behaves. Click ‘Open popup’ to sign in and consent. After completing sign-in, the popup will redirect back and step 5 will auto-fill with the code."
        },
        "callback": {
          "title": "Handle redirect (auto-pasted from popup)",
          "description": "When Microsoft Entra ID redirects to your callback, this page receives the URL from the popup and extracts code and state. If nothing appears, ensure the redirect URI exactly matches your app registration and that the popup flow wasn’t blocked.",
          "errorTitle": "Callback error",
          "okTitle": "Callback OK"
        },
        "tokens": {
          "title": "Exchange code for tokens",
          "description": "Send a POST to the token endpoint with grant_type=authorization_code, your client_id, the received code, redirect_uri, and code_verifier. Click ‘Send’ to exchange.",
          "requestTitle": "Token request",
          "responseTitle": "Token response"
        },
        "decode": {
          "title": "Decode tokens (JWT)",
          "description": "Access and ID tokens are JWTs. Click ‘Decode’ to view the header and payload claims in a readable form."
        },
        "validate": {
          "title": "Validate tokens (signature and claims)",
          "description": "This guide walks through how to validate the ID and Access tokens you received: first, how signature validation works (kid -> metadata -> jwks -> verify), then the common claim checks you should perform (aud, iss, tid, nonce, scopes/roles, exp, nbf, iat)."
        },
        "callApi": {
          "title": "Call protected API",
          "description": "Call a protected endpoint using the Bearer access token. Some APIs (like Microsoft Graph) support browser CORS; others may require a server proxy in production. Click ‘Send GET’ to execute the request and inspect the response."
        }
      },
      "labels": {
  "tenantId": "Entra Tenant ID",
        "clientId": "Client ID",
        "redirectUri": "Redirect URI",
        "scopes": "Scopes (space-separated)",
        "authEndpoint": "Authorization Endpoint",
        "tokenEndpoint": "Token Endpoint",
        "pkceMethod": "Code Challenge Method",
        "codeVerifier": "Code Verifier",
        "codeChallenge": "Code Challenge",
        "responseType": "response_type",
        "state": "state",
        "nonce": "nonce",
  "responseMode": "response_mode",
  "prompt": "prompt",
  "loginHint": "login_hint",
        "authUrlPreview": "Authorization URL preview",
        "callbackUrl": "Callback URL",
    "callbackBody": "POST body",
  "error": "Error",
  "errorUri": "Error URI",
  "errorDescription": "Error description",
        "extractedCode": "Extracted code",
        "extractedState": "Extracted state",
        "tokenRequest": "Token request (x-www-form-urlencoded)",
  "tokenEndpointPreview": "Token endpoint",
        "responsePreview": "Response preview",
        "accessToken": "Access token (JWT)",
        "idToken": "ID token (JWT)",
        "accessHeader": "Access token header",
        "accessPayload": "Access token payload",
        "idHeader": "ID token header",
        "idPayload": "ID token payload",
        "apiEndpoint": "API endpoint",
        "apiHeaders": "Request headers",
        "apiResponse": "Response preview"
      },
      "placeholders": {
    "tenantId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "clientId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "scopes": "openid profile offline_access api://.../scope.read",
    "selectMethod": "Select method",
    "codeVerifier": "Random high-entropy string",
    "codeChallenge": "Derived from code_verifier (S256/plain)",
    "state": "Optional state (recommended)",
    "nonce": "Optional nonce",
    "loginHint": "user@domain.com"
      },
      "buttons": {
        "generate": "Generate",
        "openPopup": "Open popup",
        "copyUrl": "Copy URL",
        "sending": "Sending…",
        "send": "Send",
        "copyRequest": "Copy request",
        "decode": "Decode",
        "sendGet": "Send GET",
        "previous": "Previous",
        "next": "Next"
      },
      "help": {
        "tenantId": "Directory (tenant) GUID of your Entra ID instance.",
        "clientId": "Application (client) ID of your public client app registration.",
        "redirectUri": "Callback URL for this app. Must match the redirect URI in the app registration.",
        "scopes": "Space-separated scopes to request (e.g., openid profile offline_access api://.../scope.read).",
  "authEndpoint": "OAuth 2.0 v2 authorize endpoint. Tenant is substituted in \u007Btenant\u007D.",
  "tokenEndpoint": "OAuth 2.0 v2 token endpoint. Tenant is substituted in \u007Btenant\u007D.",
        "codeVerifier": "High-entropy random string kept secret by the client (PKCE).",
        "codeChallenge": "Base64url-encoded SHA-256 hash of the code_verifier (S256).",
        "responseType": "OAuth response_type parameter; for PKCE it is 'code'.",
        "state": "Opaque value to maintain state between request and callback; helps prevent CSRF.",
        "nonce": "A string to associate a client session with an ID token; helps mitigate replay attacks.",
  "responseMode": "Where the response should be returned (query or form_post).",
  "prompt": "Controls the behavior: login, consent, select_account, create, or none.",
  "loginHint": "Prefill the username or sign-in hint (e.g., email).",
        "authUrlPreview": "The full authorization URL that will open in the popup.",
    "callbackUrl": "The full callback URL captured from the popup after sign-in.",
    "callbackBody": "If response_mode=form_post, the identity provider sends parameters in the POST body.",
  "error": "Short error code returned by the authorization server (the 'error' parameter).",
  "errorUri": "Optional URI with more information about the error (the 'error_uri' parameter).",
  "errorDescription": "Optional human-readable description of the error (the 'error_description' parameter).",
        "extractedCode": "The authorization code extracted from the callback URL.",
        "extractedState": "The state value extracted from the callback URL (if set).",
        "tokenRequest": "The POST body used to exchange the code for tokens.",
  "tokenEndpointPreview": "The full token endpoint URL that will be used to exchange the authorization code.",
        "responsePreview": "Raw response from the token endpoint (pretty-printed if JSON).",
        "accessToken": "Access token to call APIs. Shown as a JWT string.",
        "idToken": "ID token representing the user identity. Shown as a JWT string.",
        "accessHeader": "Decoded JWT header of the access token.",
        "accessPayload": "Decoded JWT payload of the access token.",
        "idHeader": "Decoded JWT header of the ID token.",
        "idPayload": "Decoded JWT payload of the ID token.",
        "apiEndpoint": "HTTP endpoint to call with the access token (e.g., Microsoft Graph).",
        "apiHeaders": "HTTP headers used for the API call (includes Authorization).",
        "apiResponse": "Raw response from the API call (pretty-printed if JSON).",
  "checkState": "Please verify the extracted state matches the expected state.",
  "checkStateAlways": "Check below that the extracted state matches the expected state before proceeding.",
        "stateValid": "state matches",
        "stateInvalid": "state does not match"
      },
      "errors": {
  "tenantIdInvalid": "Tenant is required and must be a GUID",
  "clientIdRequired": "Client ID is required and must be a GUID",
  "clientIdInvalid": "Client ID must be a GUID",
        "redirectUriInvalid": "Redirect URI must be a valid http(s) URL"
        ,
        "codeVerifierRequired": "Code Verifier is required",
        "codeChallengeRequired": "Code Challenge is required"
      }
    }
  },
  "Error": {
    "title": "Something went wrong.",
    "description": "We hit an unexpected error. You can try to recover.",
    "tryAgain": "Try again"
  }
}
